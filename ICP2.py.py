# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nUw3JoxHhXrSjWNmLWZWdgF-24HLsPSh
"""

class Employee:
    # Class variable to count the number of employees
    employee_count = 0

    def __init__(self, name, family, salary, department):  # Changed _init_ to __init__
        self.name = name
        self.family = family
        self.salary = salary
        self.department = department
        Employee.employee_count += 1

    def average_salary(self, employees):
        total_salary = sum(employee.salary for employee in employees)
        return total_salary / len(employees) if employees else 0

    def __str__(self):  # Changed _str_ to __str__
        return f"Employee(name={self.name}, family={self.family}, salary={self.salary}, department={self.department})"


class FulltimeEmployee(Employee):
    def __init__(self, name, family, salary, department):  # Changed _init_ to __init__
        super().__init__(name, family, salary, department)
        # attributes to FulltimeEmployee can be added here

    def __str__(self):  # Changed _str_ to __str__
        return f"FulltimeEmployee(name={self.name}, family={self.family}, salary={self.salary}, department={self.department})"


# Creating instances of Employee
emp1 = Employee("vijay", "Gonaboyina", 60000, "HR")
emp2 = Employee("Ravi", "Indugula", 70000, "Finance")

# Creating instances of FulltimeEmployee
ft_emp1 = FulltimeEmployee("Prem", "Manyam", 80000, "IT")
ft_emp2 = FulltimeEmployee("Swaroop", "Adabala", 75000, "Marketing")

# List of all employees
all_employees = [emp1, emp2, ft_emp1, ft_emp2]

# Calculate and print average salary(average of salary of all employees)
employee = Employee("Temp", "Temp", 0, "None")
print(f"Average Salary: {employee.average_salary(all_employees)}")

# Print the details of each employee
for emp in all_employees:
    print(emp)

# Print total number of employees
print(f"Total number of employees: {Employee.employee_count}")

import numpy as np

#random vector of size 20 with floats in the range 1-20
vector = np.random.uniform(1, 20, size=20)
print(vector)
print()

#vector to 4x5
matrix = vector.reshape(4, 5)

#Replace the max in each row with 0 (axis=1)
# Get the indices of the maximum values along axis=1
max_indices = np.argmax(matrix, axis=1)

# Create a boolean mask where the max values are True
mask = np.arange(matrix.shape[1]) == max_indices[:, None]

# Apply the mask to set max values to 0
matrix[mask] = 0

# Output the result
print("Matrix after replacing max values with 0:")
print(matrix)